

#include<iostream>
#include<queue>
#include <time.h>
using namespace std;
const long long int maxn=1e4 ;
long long int n , c , cnt = 1 ,best_x[maxn] , best_v = 0, w[maxn], v[maxn];
long long int total=1;
struct node        
{
    int no , i , w , v;
    int x[maxn];    
    double ub;        
    bool operator<(const node &s)const 
    {
        return ub<s.ub;  
    }
};


void bound(node &e){ 
	int i = e.i +1; 
	int sumw = e.w;
	double sumv = e.v;
	while((sumw + w[i] <= c ) and i <= n){
		sumw += w[i];
		sumv += v[i];
		i++;
	}
	if(i <= n ){
		e.ub = sumv + (c - sumw)*v[i]/ w[i];
	}
	else
	    e.ub = sumv;
}


void insert(node e , priority_queue<node>&pq){
	if(e.i == n){
		if(e.v > best_v){
			best_v = e.v;
			for(int j = 1 ; j <= n; j++){
				best_x[j] = e.x[j];
			}
		}
	}
	else
	   pq.push(e);
}

void BB(){
	node curr , left , right;
	priority_queue<node> pq;
	curr.i = 0;
	curr.v = 0;
	curr.w = 0;
	curr.no = cnt++; 
	for(int j = 1 ; j <= n ; j++){ 
		curr.x[j] = 0;
	}
	bound(curr); 
	pq.push(curr);

	while(!pq.empty()){

		curr = pq.top(); 
		pq.pop();
		if(curr.w + w[curr.i+1] <= c){ 
			left.no = cnt; 
			left.i = curr.i+1;
			left.w = curr.w + w[left.i];
			left.v = curr.v + v[left.i];
			for(int j = 1;  j <= n ; j++){
				left.x[j] = curr.x[j]; 
			}
			left.x[left.i] = 1; 
			bound(left);
			insert(left , pq);
            cnt++;
		}

		right.no = cnt; 
		right.i = curr.i+1;
		right.w = curr.w; 
		right.v = curr.v;
		for(int j = 1;  j <= n ; j++){
			right.x[j] = curr.x[j]; 
		}
		right.x[right.i] = 0;
		bound(right);
		if(right.ub > best_v){ 
			insert(right , pq);
            cnt++;
		}
	}
}

int main(){

	n = 1000;
	int ww[] = {21,25,17,29,10,22,28,20,30,30,13,23,16,21,24,26,15,11,22,16,17,22,15,10,13,29,30,10,23,26,20,17,11,17,10,18,27,29,15,23,29,21,27,10,21,16,28,25,10,24,15,19,17,14,29,28,20,25,30,28,26,17,24,24,13,22,20,11,23,26,23,27,27,13,21,10,16,20,16,12,18,24,21,23,24,25,22,19,16,26,30,25,22,30,18,13,18,19,13,27,23,22,17,18,13,26,12,20,13,21,27,25,23,12,27,12,12,26,26,19,15,14,11,28,17,17,20,27,27,29,17,26,19,16,15,20,14,12,16,19,24,21,14,28,19,25,17,17,30,30,26,22,12,13,11,17,20,25,21,20,19,27,18,17,11,26,12,14,30,19,13,14,18,18,19,12,10,25,21,22,24,27,20,26,19,30,24,29,10,29,18,28,14,26,30,28,28,17,30,17,14,11,14,27,10,24,19,24,14,24,26,16,23,21,29,16,27,26,12,27,11,21,17,11,23,14,14,13,18,16,19,16,28,15,19,17,15,17,13,22,22,27,23,26,20,14,30,17,11,30,18,16,21,17,17,14,16,24,18,28,18,19,23,19,13,22,25,17,11,10,21,12,24,14,25,28,27,30,13,21,28,17,30,30,25,24,20,13,21,15,28,18,11,25,18,25,20,23,11,26,11,17,18,30,12,28,22,21,28,10,26,23,10,16,25,26,16,13,13,13,12,30,17,17,13,20,15,30,18,10,19,12,16,20,27,16,26,27,20,24,23,19,23,17,25,24,27,21,10,13,16,19,14,26,29,17,14,23,24,29,23,14,30,19,22,18,26,12,19,30,17,11,10,22,25,23,21,15,29,21,19,16,17,21,30,15,16,17,22,28,13,13,26,16,13,12,27,26,18,17,29,15,28,19,16,16,26,11,19,16,25,16,10,19,14,18,17,21,30,24,12,28,11,21,17,15,21,27,10,26,16,30,17,16,13,24,12,29,23,22,30,23,24,11,27,30,10,10,27,10,20,21,14,25,27,10,20,29,25,28,21,15,28,18,12,29,14,17,27,29,23,29,22,17,24,24,28,19,22,16,13,11,19,12,17,29,22,20,29,24,22,16,28,20,26,24,23,15,12,26,13,12,16,10,27,22,10,27,20,12,12,14,28,13,19,24,11,23,18,22,10,15,16,16,22,10,15,22,21,25,30,23,20,15,15,22,23,21,19,22,21,15,14,19,18,20,26,28,21,25,28,17,13,20,22,17,29,11,12,28,23,13,11,21,22,12,12,11,19,25,30,27,21,18,30,30,23,29,27,20,13,12,22,25,13,25,19,17,28,30,17,11,29,11,25,24,17,13,25,20,21,24,25,10,16,21,15,11,14,12,13,29,23,10,10,30,29,27,11,14,13,11,13,16,13,18,22,16,12,24,23,15,27,22,20,14,13,23,10,14,15,13,30,13,11,20,12,28,21,14,28,14,10,14,12,23,11,22,21,19,25,15,28,23,29,15,14,27,22,18,17,13,16,11,16,10,16,29,30,24,12,14,15,29,11,25,11,16,11,11,10,16,27,14,13,22,29,18,12,20,14,17,19,21,10,19,18,18,26,10,15,26,21,28,29,15,24,29,16,13,10,30,13,12,15,25,29,28,30,12,27,13,30,21,13,22,18,22,18,27,23,23,10,20,24,18,13,10,22,29,18,28,10,13,28,20,29,13,29,23,14,25,22,28,23,16,27,13,14,21,12,20,13,10,28,28,21,18,15,19,24,25,28,15,16,27,10,11,16,30,12,30,17,20,12,28,21,22,22,19,18,27,20,15,15,20,15,23,10,30,30,12,26,17,22,27,16,20,27,30,23,25,21,26,10,25,18,21,29,16,15,24,18,14,17,22,10,21,13,18,12,19,18,28,27,18,15,26,26,25,27,18,20,17,20,24,30,28,17,24,14,25,23,15,28,14,21,22,19,16,21,15,23,25,22,12,13,27,11,19,15,12,18,27,23,25,23,15,15,13,23,14,11,25,10,15,19,17,26,14,24,14,12,22,18,20,10,13,20,15,25,30,17,10,10,15,22,29,29,28,27,30,28,25,10,12,29,30,30,20,17,20,28,18,12,13,20,29,22,15,22,22,12,11,19,15,24,16,16,18,18,25,14,24,30,24,14,11,30,24,22,27,24,10,10,21,27,20,24,24,27,14,14,23,23,30,20,11,21,24,25,16,17,17,28,23,26,13,18,20,27,22,25,24,14,23,17,26,15,17};
    int pp[] = {42,41,48,30,46,43,30,36,45,46,36,33,33,33,32,50,37,37,33,40,35,50,38,30,39,32,36,40,47,36,46,47,40,44,43,39,43,37,45,44,47,41,30,33,36,39,34,46,49,37,34,43,44,49,43,34,50,39,42,38,46,32,39,50,37,31,30,42,45,43,41,35,49,41,39,36,37,41,50,35,36,37,42,48,33,33,46,36,33,32,47,46,38,37,49,35,48,39,36,36,46,31,39,36,45,36,30,39,34,38,37,41,50,44,32,48,31,41,37,35,41,47,30,46,36,50,37,36,33,44,32,49,43,42,50,43,44,31,47,50,30,30,47,30,40,41,34,45,47,30,40,49,45,48,41,35,48,38,32,49,34,37,47,49,43,49,42,37,44,44,48,39,42,36,33,31,39,32,37,49,42,40,49,44,42,36,48,40,46,44,43,35,32,46,33,32,36,30,47,42,30,47,40,32,32,34,48,33,39,44,31,43,38,42,30,35,36,36,42,30,35,42,41,45,50,43,40,35,35,42,43,41,39,42,41,35,34,39,38,40,46,48,41,45,48,37,33,40,42,37,49,31,32,48,43,33,31,41,42,32,32,31,39,45,50,47,41,38,50,50,43,49,47,40,33,32,42,45,33,45,39,37,48,50,37,31,49,31,45,44,37,33,45,40,41,44,45,30,36,41,35,31,34,32,33,49,43,30,30,50,49,47,31,34,33,31,33,36,33,38,42,36,32,44,43,35,47,42,40,34,33,43,30,34,35,33,50,33,31,40,32,48,41,34,48,34,30,34,32,43,31,42,41,39,45,35,48,43,49,35,34,47,42,38,37,33,36,31,36,30,36,49,50,44,32,34,35,49,31,45,31,36,31,31,30,36,47,34,33,42,49,38,32,40,34,37,39,41,30,39,38,38,46,30,35,46,41,48,49,35,44,49,36,33,30,50,33,32,35,45,49,48,50,32,47,33,50,41,33,42,38,42,38,47,43,43,30,40,44,38,33,30,42,49,38,48,30,33,48,40,49,33,49,43,34,45,42,48,43,36,47,33,34,41,32,40,33,30,48,48,41,38,35,39,44,45,48,35,36,47,30,31,36,50,32,50,37,40,32,48,41,42,42,39,38,47,40,35,35,40,35,43,30,50,50,32,46,37,42,47,36,40,47,50,43,45,41,46,30,45,38,41,49,36,35,44,38,34,37,42,30,41,33,38,32,39,38,48,47,38,35,46,46,45,47,38,40,37,40,44,50,48,37,44,34,45,43,35,48,34,41,42,39,36,41,35,43,45,42,32,33,47,31,39,35,32,38,47,43,45,43,35,35,33,43,34,31,45,30,35,39,37,46,34,44,34,32,42,38,40,30,33,40,35,45,50,37,30,30,35,42,49,49,48,47,50,48,45,30,32,49,50,50,40,37,40,48,38,32,33,40,49,42,35,42,42,32,31,39,35,44,36,36,38,38,45,34,44,50,44,34,31,50,44,42,47,44,30,30,41,47,40,44,44,47,34,34,43,43,50,40,31,41,44,45,36,37,37,48,43,46,33,38,40,47,42,45,44,34,43,37,46,35,37};
	c  = 4000;
    for(int i = 1; i <= n; i++)
    {
        w[i] = ww[i-1];
		v[i] = pp[i-1];
    }
    BB();
    cout<<"Least cost BB"<<endl;
    cout<<"\nThe optimal value is:"<<best_v<<endl;
    cout<<"(";
    for(int i=1;i<=n;i++)
        cout<<best_x[i]<<" ";
        //cout<<
    cout<<")";
    cout<<endl;
    cout<<" Total  node created : "<<cnt-n <<endl;


	return 0;
}

